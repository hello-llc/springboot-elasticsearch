package com.cun.util.es.db.mapper;

import com.cun.util.es.db.pojo.MetaDatasource;
import com.cun.util.es.db.pojo.MetaDatasourceExample.Criteria;
import com.cun.util.es.db.pojo.MetaDatasourceExample.Criterion;
import com.cun.util.es.db.pojo.MetaDatasourceExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class MetaDatasourceSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meta_datasource
     *
     * @mbg.generated
     */
    public String countByExample(MetaDatasourceExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("meta_datasource");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meta_datasource
     *
     * @mbg.generated
     */
    public String deleteByExample(MetaDatasourceExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("meta_datasource");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meta_datasource
     *
     * @mbg.generated
     */
    public String insertSelective(MetaDatasource record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("meta_datasource");
        
        if (record.getTableId() != null) {
            sql.VALUES("table_id", "#{tableId,jdbcType=BIGINT}");
        }
        
        if (record.getFilePath() != null) {
            sql.VALUES("file_path", "#{filePath,jdbcType=VARCHAR}");
        }
        
        if (record.getDatabaseId() != null) {
            sql.VALUES("database_id", "#{databaseId,jdbcType=BIGINT}");
        }
        
        if (record.getSourceTableName() != null) {
            sql.VALUES("source_table_name", "#{sourceTableName,jdbcType=VARCHAR}");
        }
        
        if (record.getQuerySql() != null) {
            sql.VALUES("query_sql", "#{querySql,jdbcType=VARCHAR}");
        }
        
        if (record.getHttpCallUrl() != null) {
            sql.VALUES("http_call_url", "#{httpCallUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getRequestMethod() != null) {
            sql.VALUES("request_method", "#{requestMethod,jdbcType=VARCHAR}");
        }
        
        if (record.getHttpCallParams() != null) {
            sql.VALUES("http_call_params", "#{httpCallParams,jdbcType=VARCHAR}");
        }
        
        if (record.getInitParamsProvider() != null) {
            sql.VALUES("init_params_provider", "#{initParamsProvider,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateParamsProvider() != null) {
            sql.VALUES("update_params_provider", "#{updateParamsProvider,jdbcType=VARCHAR}");
        }
        
        if (record.getReplaceParams() != null) {
            sql.VALUES("replace_params", "#{replaceParams,jdbcType=BIT}");
        }
        
        if (record.getParamsProvider() != null) {
            sql.VALUES("params_provider", "#{paramsProvider,jdbcType=VARCHAR}");
        }
        
        if (record.getResultPosition() != null) {
            sql.VALUES("result_position", "#{resultPosition,jdbcType=VARCHAR}");
        }
        
        if (record.getDelFlag() != null) {
            sql.VALUES("del_flag", "#{delFlag,jdbcType=BIT}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getParamFromTable() != null) {
            sql.VALUES("param_from_table", "#{paramFromTable,jdbcType=BIT}");
        }
        
        if (record.getFromTableName() != null) {
            sql.VALUES("from_table_name", "#{fromTableName,jdbcType=VARCHAR}");
        }
        
        if (record.getParamCondition() != null) {
            sql.VALUES("param_condition", "#{paramCondition,jdbcType=VARCHAR}");
        }
        
        if (record.getParamType() != null) {
            sql.VALUES("param_type", "#{paramType,jdbcType=VARCHAR}");
        }
        
        if (record.getRequestResultType() != null) {
            sql.VALUES("request_result_type", "#{requestResultType,jdbcType=VARCHAR}");
        }
        
        if (record.getSourceType() != null) {
            sql.VALUES("source_type", "#{sourceType,jdbcType=INTEGER}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meta_datasource
     *
     * @mbg.generated
     */
    public String selectByExample(MetaDatasourceExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("table_id");
        sql.SELECT("file_path");
        sql.SELECT("database_id");
        sql.SELECT("source_table_name");
        sql.SELECT("query_sql");
        sql.SELECT("http_call_url");
        sql.SELECT("request_method");
        sql.SELECT("http_call_params");
        sql.SELECT("init_params_provider");
        sql.SELECT("update_params_provider");
        sql.SELECT("replace_params");
        sql.SELECT("params_provider");
        sql.SELECT("result_position");
        sql.SELECT("del_flag");
        sql.SELECT("create_time");
        sql.SELECT("update_time");
        sql.SELECT("param_from_table");
        sql.SELECT("from_table_name");
        sql.SELECT("param_condition");
        sql.SELECT("param_type");
        sql.SELECT("request_result_type");
        sql.SELECT("source_type");
        sql.FROM("meta_datasource");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meta_datasource
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        MetaDatasource record = (MetaDatasource) parameter.get("record");
        MetaDatasourceExample example = (MetaDatasourceExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("meta_datasource");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=BIGINT}");
        }
        
        if (record.getTableId() != null) {
            sql.SET("table_id = #{record.tableId,jdbcType=BIGINT}");
        }
        
        if (record.getFilePath() != null) {
            sql.SET("file_path = #{record.filePath,jdbcType=VARCHAR}");
        }
        
        if (record.getDatabaseId() != null) {
            sql.SET("database_id = #{record.databaseId,jdbcType=BIGINT}");
        }
        
        if (record.getSourceTableName() != null) {
            sql.SET("source_table_name = #{record.sourceTableName,jdbcType=VARCHAR}");
        }
        
        if (record.getQuerySql() != null) {
            sql.SET("query_sql = #{record.querySql,jdbcType=VARCHAR}");
        }
        
        if (record.getHttpCallUrl() != null) {
            sql.SET("http_call_url = #{record.httpCallUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getRequestMethod() != null) {
            sql.SET("request_method = #{record.requestMethod,jdbcType=VARCHAR}");
        }
        
        if (record.getHttpCallParams() != null) {
            sql.SET("http_call_params = #{record.httpCallParams,jdbcType=VARCHAR}");
        }
        
        if (record.getInitParamsProvider() != null) {
            sql.SET("init_params_provider = #{record.initParamsProvider,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateParamsProvider() != null) {
            sql.SET("update_params_provider = #{record.updateParamsProvider,jdbcType=VARCHAR}");
        }
        
        if (record.getReplaceParams() != null) {
            sql.SET("replace_params = #{record.replaceParams,jdbcType=BIT}");
        }
        
        if (record.getParamsProvider() != null) {
            sql.SET("params_provider = #{record.paramsProvider,jdbcType=VARCHAR}");
        }
        
        if (record.getResultPosition() != null) {
            sql.SET("result_position = #{record.resultPosition,jdbcType=VARCHAR}");
        }
        
        if (record.getDelFlag() != null) {
            sql.SET("del_flag = #{record.delFlag,jdbcType=BIT}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getParamFromTable() != null) {
            sql.SET("param_from_table = #{record.paramFromTable,jdbcType=BIT}");
        }
        
        if (record.getFromTableName() != null) {
            sql.SET("from_table_name = #{record.fromTableName,jdbcType=VARCHAR}");
        }
        
        if (record.getParamCondition() != null) {
            sql.SET("param_condition = #{record.paramCondition,jdbcType=VARCHAR}");
        }
        
        if (record.getParamType() != null) {
            sql.SET("param_type = #{record.paramType,jdbcType=VARCHAR}");
        }
        
        if (record.getRequestResultType() != null) {
            sql.SET("request_result_type = #{record.requestResultType,jdbcType=VARCHAR}");
        }
        
        if (record.getSourceType() != null) {
            sql.SET("source_type = #{record.sourceType,jdbcType=INTEGER}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meta_datasource
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("meta_datasource");
        
        sql.SET("id = #{record.id,jdbcType=BIGINT}");
        sql.SET("table_id = #{record.tableId,jdbcType=BIGINT}");
        sql.SET("file_path = #{record.filePath,jdbcType=VARCHAR}");
        sql.SET("database_id = #{record.databaseId,jdbcType=BIGINT}");
        sql.SET("source_table_name = #{record.sourceTableName,jdbcType=VARCHAR}");
        sql.SET("query_sql = #{record.querySql,jdbcType=VARCHAR}");
        sql.SET("http_call_url = #{record.httpCallUrl,jdbcType=VARCHAR}");
        sql.SET("request_method = #{record.requestMethod,jdbcType=VARCHAR}");
        sql.SET("http_call_params = #{record.httpCallParams,jdbcType=VARCHAR}");
        sql.SET("init_params_provider = #{record.initParamsProvider,jdbcType=VARCHAR}");
        sql.SET("update_params_provider = #{record.updateParamsProvider,jdbcType=VARCHAR}");
        sql.SET("replace_params = #{record.replaceParams,jdbcType=BIT}");
        sql.SET("params_provider = #{record.paramsProvider,jdbcType=VARCHAR}");
        sql.SET("result_position = #{record.resultPosition,jdbcType=VARCHAR}");
        sql.SET("del_flag = #{record.delFlag,jdbcType=BIT}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("param_from_table = #{record.paramFromTable,jdbcType=BIT}");
        sql.SET("from_table_name = #{record.fromTableName,jdbcType=VARCHAR}");
        sql.SET("param_condition = #{record.paramCondition,jdbcType=VARCHAR}");
        sql.SET("param_type = #{record.paramType,jdbcType=VARCHAR}");
        sql.SET("request_result_type = #{record.requestResultType,jdbcType=VARCHAR}");
        sql.SET("source_type = #{record.sourceType,jdbcType=INTEGER}");
        
        MetaDatasourceExample example = (MetaDatasourceExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meta_datasource
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(MetaDatasource record) {
        SQL sql = new SQL();
        sql.UPDATE("meta_datasource");
        
        if (record.getTableId() != null) {
            sql.SET("table_id = #{tableId,jdbcType=BIGINT}");
        }
        
        if (record.getFilePath() != null) {
            sql.SET("file_path = #{filePath,jdbcType=VARCHAR}");
        }
        
        if (record.getDatabaseId() != null) {
            sql.SET("database_id = #{databaseId,jdbcType=BIGINT}");
        }
        
        if (record.getSourceTableName() != null) {
            sql.SET("source_table_name = #{sourceTableName,jdbcType=VARCHAR}");
        }
        
        if (record.getQuerySql() != null) {
            sql.SET("query_sql = #{querySql,jdbcType=VARCHAR}");
        }
        
        if (record.getHttpCallUrl() != null) {
            sql.SET("http_call_url = #{httpCallUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getRequestMethod() != null) {
            sql.SET("request_method = #{requestMethod,jdbcType=VARCHAR}");
        }
        
        if (record.getHttpCallParams() != null) {
            sql.SET("http_call_params = #{httpCallParams,jdbcType=VARCHAR}");
        }
        
        if (record.getInitParamsProvider() != null) {
            sql.SET("init_params_provider = #{initParamsProvider,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateParamsProvider() != null) {
            sql.SET("update_params_provider = #{updateParamsProvider,jdbcType=VARCHAR}");
        }
        
        if (record.getReplaceParams() != null) {
            sql.SET("replace_params = #{replaceParams,jdbcType=BIT}");
        }
        
        if (record.getParamsProvider() != null) {
            sql.SET("params_provider = #{paramsProvider,jdbcType=VARCHAR}");
        }
        
        if (record.getResultPosition() != null) {
            sql.SET("result_position = #{resultPosition,jdbcType=VARCHAR}");
        }
        
        if (record.getDelFlag() != null) {
            sql.SET("del_flag = #{delFlag,jdbcType=BIT}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getParamFromTable() != null) {
            sql.SET("param_from_table = #{paramFromTable,jdbcType=BIT}");
        }
        
        if (record.getFromTableName() != null) {
            sql.SET("from_table_name = #{fromTableName,jdbcType=VARCHAR}");
        }
        
        if (record.getParamCondition() != null) {
            sql.SET("param_condition = #{paramCondition,jdbcType=VARCHAR}");
        }
        
        if (record.getParamType() != null) {
            sql.SET("param_type = #{paramType,jdbcType=VARCHAR}");
        }
        
        if (record.getRequestResultType() != null) {
            sql.SET("request_result_type = #{requestResultType,jdbcType=VARCHAR}");
        }
        
        if (record.getSourceType() != null) {
            sql.SET("source_type = #{sourceType,jdbcType=INTEGER}");
        }
        
        sql.WHERE("id = #{id,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meta_datasource
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, MetaDatasourceExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}